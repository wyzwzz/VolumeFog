#version 460 core
// 160 * 90 * 256
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

const int MaxLocalVolumeN = 15;

struct GeometryInfoT{
    vec3 low; int UID;
    vec3 high; int pad;
    mat4 model;
};

// intersect with frustum
layout(binding = 0, std140) uniform IntersectVolumeUID{
    // 0 store count
    // size = MaxLocalVolumeN + 1
    // data from 1 to count
    ivec4 IntersectUID[MaxLocalVolumeN + 1];
};

layout(binding = 1, std140) uniform IntersectGeometryInfo{
    GeometryInfoT IntersectGeometry[MaxLocalVolumeN + 1];
};

shared GeometryInfoT S_GeometryInfo[MaxLocalVolumeN + 1];
shared int S_IntersectUID[MaxLocalVolumeN + 1];// padding 1 to 16

struct VirtualInfoT{
    // one volume has two RGBA volume data
    // volume 0 : scattering rgb and extinction
    // volume 1 : emissive rgb and phase g
    vec4 origin0, origin1; // x y z k
    vec4 shape0, shape1; // w h d

};

layout(binding = 2, std140) uniform VirtualTextureTable{
    VirtualInfoT VirtualInfo[MaxLocalVolumeN + 1];
};

layout(binding = 0) uniform sampler2D GlobalFogTexture;
// global origin and shape

const int MaxVirtualTextureN = 2;

layout(binding = 2) uniform sampler3D VirtualTextures[MaxVirtualTextureN];

layout(binding = 3, std140) uniform Params{
    vec3 WorldOrigin;
    int SliceZCount;
    vec3 WorldShape;
    int FillVolumeMedia;
    vec3 InvVirtualTextureShape;
    int FrameIndex;
    mat4 Proj;
    mat4 InvProj;
    mat4 InvView;
    //todo camera_far_z
};

void SampleGlobalVolume(in vec3 world_pos, out vec4 rgba0, out vec4 rgba1){
    vec3 sample_pos = (world_pos - WorldOrigin) / WorldShape;
    if(all(equal(clamp(sample_pos, vec3(0), vec3(1)), sample_pos))){
        vec3 rgb = texture(GlobalFogTexture, sample_pos.xz).rgb;
        if(world_pos.y < rgb.r){
            rgba0 = vec4(0);
        }
        else if(world_pos.y < rgb.r + rgb.g){
            rgba0 = vec4(vec3(rgb.b), 0.0);
        }
        else{
            float density = exp(-(world_pos.y - rgb.r - rgb.g)) * rgb.b;
            rgba0 = vec4(vec3(density), 0.0);
        }

        rgba1 = vec4(0);
    }
    else{
        rgba0 = vec4(0);
        rgba1 = vec4(0);
    }
}

void VirtualSample(in int UID, in vec3 offset, out vec4 rgba0, out vec4 rgba1){
    VirtualInfoT virtual_info = VirtualInfo[UID];
    int k = int(virtual_info.origin0.w);
    vec3 sample_pos = (virtual_info.origin0.xyz + offset * virtual_info.shape0.xyz) * InvVirtualTextureShape;
    rgba0 = texture(VirtualTextures[k], sample_pos).rgba;

    k = int(virtual_info.origin1.w);
    sample_pos = (virtual_info.origin1.xyz + offset * virtual_info.shape1.xyz) * InvVirtualTextureShape;
    rgba1 = texture(VirtualTextures[k],  sample_pos).rgba;
}

bool Intersect(in vec3 pointPos, in vec3 aabbLow, in vec3 aabbHigh){
    return pointPos.x > aabbLow.x && pointPos.x < aabbHigh.x
        && pointPos.y > aabbLow.y && pointPos.y < aabbHigh.y
        && pointPos.z > aabbLow.z && pointPos.z < aabbHigh.z;
}

//readwrite
layout(binding = 0, rgba32f) uniform image3D VBuffer0;
layout(binding = 1, rgba32f) uniform image3D VBuffer1;

const int BlockLen = 4;
const ivec3 BlockSize = ivec3(BlockLen, BlockLen, BlockLen);
void main(){
    // todo imageSize bug?
    ivec3 res = imageSize(VBuffer0);
    res.z = SliceZCount;
    //一个线程负责一块block区域的填充
    ivec3 g_index = ivec3(gl_WorkGroupSize.xyz * gl_WorkGroupID.xyz + gl_LocalInvocationID.xyz);

    int intersect_volume_count = IntersectUID[0].x;
    for(int i = 0; i < intersect_volume_count; ++i){
        S_IntersectUID[i] = IntersectUID[i + 1].x;
    }
    for(int i = 0; i < MaxLocalVolumeN; i++)
        S_GeometryInfo[i] = IntersectGeometry[i];
//    int uid = S_IntersectUID[0];
//    imageStore(VBuffer0, g_index, vec4(S_GeometryInfo[uid].low, 1.0));
//    imageStore(VBuffer1, g_index, vec4(S_GeometryInfo[uid].high, 1.0));
//    return;
    for(int lz = 0; lz < BlockLen; ++lz){
        for(int ly = 0; ly < BlockLen; ++ly){
            for(int lx = 0; lx < BlockLen; ++lx){
                ivec3 index = g_index *  BlockLen + ivec3(lx, ly, lz);
                if(index.x >= res.x || index.y >= res.y || index.z >= res.z)
                    continue;

                vec4 vbuffer0 = vec4(0), vbuffer1 = vec4(0);
                vec4 rgba0, rgba1;

                if(!bool(FillVolumeMedia)){
                    imageStore(VBuffer0, index, vbuffer0);
                    imageStore(VBuffer1, index, vbuffer1);
                    continue;
                }
//                imageStore(VBuffer0, index, vec4(index, 1.0));
//                imageStore(VBuffer1, g_index, vec4(g_index, 0.5));
//                return;

                //todo center + jitter + re-project and temporal blend
                float jitter = fract((sin(FrameIndex + index.y * 12.9898 * 2) + cos(FrameIndex + index.x * 12.9898 * 2)) * (43758.5453 + index.z));
                jitter = jitter * 0.5 + 0.25;
                // clip coord -> world pos
                vec2 clip_xy = (vec2(index.x + jitter, index.y + jitter) / res.xy - 0.5) * 2.0;
                vec4 _clip = Proj * vec4(0.0, 0.0, (index.z + jitter) / SliceZCount * 100.0, 1.0);
                float _clip_z = _clip.z / _clip.w;// * 0.5 + 0.5;
                vec4 view_xy = InvProj * vec4(clip_xy, _clip_z, 1.0);
                vec4 view_pos = vec4(view_xy.xy/view_xy.w, (index.z + 0.5) / SliceZCount * 100.0, 1.0);
                vec4 world_pos = InvView * (view_pos);
                vec3 grid_sample_pos = world_pos.xyz / world_pos.w;

                // local volume
                for(int i = 0; i < intersect_volume_count; ++i){
                    int UID = S_IntersectUID[i];
                    if(Intersect(grid_sample_pos, S_GeometryInfo[UID].low, S_GeometryInfo[UID].high)){
                        // compute offset
//                        mat4 model = S_GeometryInfo[UID].model;
                        vec3 offset = grid_sample_pos - S_GeometryInfo[UID].low;
//                        offset = vec3(model * vec4(offset, 0));
                        offset = offset  / (S_GeometryInfo[UID].high - S_GeometryInfo[UID].low);
                        // query for virtual texture
                        VirtualSample(UID, offset, rgba0, rgba1);
//                        rgba0 = vec4(0.001, 0.0001, 0.01, 0.0001);
                        vbuffer0 += rgba0;
                        vbuffer1 += rgba1;
//                        return ;
                    }
                }
                // global volume
                SampleGlobalVolume(grid_sample_pos, rgba0, rgba1);
                vbuffer0 += rgba0;
                vbuffer1 += rgba1;
//                imageStore(VBuffer0, index, vec4(index, 1.0));
//                imageStore(VBuffer1, index, vec4(grid_sample_pos, 1.0));
                imageStore(VBuffer0, index, vbuffer0);
                imageStore(VBuffer1, index, vbuffer1);
//                imageStore(VBuffer1, index, vec4(grid_sample_pos, 0.5));
            }
        }
    }


}