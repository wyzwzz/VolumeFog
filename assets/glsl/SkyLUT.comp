#version 460 core

#define PI 3.14159265

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std140, binding = 0) uniform AtmosphereProperties{
    vec3 RayleighScattering;
    float RayleighDensityH;

    float MieScattering;
    float MieAsymmetryG;
    float MieAbsorption;
    float MieDensityH;

    vec3 OzoneAbsorption;
    float OzoneCenterH;
    float OzoneWidth;

    float GroundRadius;
    float TopAtmosphereRadius;
    float pad;
};

layout(std140, binding = 1) uniform SkyParams{
    vec3 SunDir;
    int RayMarchingSteps;
    vec3 SunRadiance;
    int EnableMultiScattering;
};

layout(std140, binding = 2) uniform SkyPerFrameParams{
    vec3 ViewPos;
};

layout(binding = 0) uniform sampler2D TransmittanceLUT;
layout(binding = 1) uniform sampler2D MultiScatteringLUT;

layout(rgba32f, binding = 0) uniform image2D SkyLUT;

bool FindClosestIntersectionWithCircle(vec2 o, vec2 d, float R, out float t){
    float A = dot(d, d);
    float B = 2 * dot(o, d);
    float C = dot(o, o) - R * R;
    float delta = B * B - 4 * A * C;
    if (delta < 0)
    return false;
    t = (-B + (C <= 0 ? sqrt(delta) : -sqrt(delta))) / (2 * A);
    return (C <= 0) || (B <= 0);
}

bool HasIntersectionWithSphere(vec3 o, vec3 d, float R){
    float A = dot(d, d);
    float B = 2 * dot(o, d);
    float C = dot(o, o) - R * R;
    float delta = B * B - 4 * A * C;
    return (delta >= 0) && ((C <= 0) || (B <= 0));
}

void GetSigmaST(float h, out vec3 sigma_s, out vec3 sigma_t){
    vec3 rayleigh = RayleighScattering * exp(-h / RayleighDensityH);
    vec3 mie_s = vec3(MieScattering) * exp(-h / MieDensityH);
    vec3 mie_t = vec3(MieScattering + MieAbsorption) * exp(-h / MieDensityH);
    vec3 ozone = OzoneAbsorption * max(0.0, 1 - abs(h - OzoneCenterH) / (OzoneWidth * 0.5));
    sigma_s = rayleigh + mie_s;
    sigma_t = rayleigh + mie_t + ozone;
}

vec3 EvalPhaseFunction(float h, float u){
    vec3 sRayleigh = RayleighScattering * exp(-h / RayleighDensityH);
    float sMie = MieScattering * exp(-h / MieDensityH);
    vec3 s = sRayleigh + sMie;

    float g = MieAsymmetryG, g2 = g * g, u2 = u * u;
    float pRayleigh = 3 / (16 * PI) * (1 + u2);

    float m = 1 + g2 - 2 * g * u;
    float pMie = 3 / (8 * PI) * (1 - g2) * (1 + u2) / ((2 + g2) * m * sqrt(m));

    vec3 result;
    result.x = s.x > 0 ? (pRayleigh * sRayleigh.x + pMie * sMie) / s.x : 0;
    result.y = s.y > 0 ? (pRayleigh * sRayleigh.y + pMie * sMie) / s.y : 0;
    result.z = s.z > 0 ? (pRayleigh * sRayleigh.z + pMie * sMie) / s.z : 0;
    return result;
}

float SafeSqrt(float a) {
    return sqrt(max(a, 0.0));
}

float ClampDistance(float d) {
    return max(d, 0.0);
}

float DistanceToTopAtmosphereBoundary(float r, float mu){
    float discriminant = r * r * (mu * mu - 1.0) + TopAtmosphereRadius * TopAtmosphereRadius;
    return ClampDistance(-r * mu + SafeSqrt(discriminant));
}

// mapping form [0, 1] to [0.5 / n, 1 - 0.5 / n]
float GetTextureCoordFromUnitRange(float x, int texture_size) {
    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));
}

vec2 GetTransmittanceTextureUVFromRMu(float r, float mu, in ivec2 res){
    float H =  sqrt(TopAtmosphereRadius * TopAtmosphereRadius - GroundRadius * GroundRadius);
    float rho = SafeSqrt(r * r - GroundRadius * GroundRadius);
    float d = DistanceToTopAtmosphereBoundary(r, mu);
    float d_min = (TopAtmosphereRadius - r);
    float d_max = rho + H;
    float x_mu = (d - d_min) / (d_max - d_min);
    float x_r = rho / H;
    return vec2(GetTextureCoordFromUnitRange(x_mu, res.x), GetTextureCoordFromUnitRange(x_r, res.y));
}

// theta is view with horizon
vec3 GetTransmittance(float h, float theta){
    float r = h * 0.99  + GroundRadius;
    float mu = cos(PI / 2 - theta);
    vec2 uv = GetTransmittanceTextureUVFromRMu(r, mu, textureSize(TransmittanceLUT, 0));
    return texture(TransmittanceLUT, uv).rgb;
}

vec3 GetMultiScattering(float h, float theta){
    float u = h / (TopAtmosphereRadius - GroundRadius);
    float v = 0.5 + 0.5 * sin(theta);
    return texture(MultiScatteringLUT, vec2(u, v)).rgb;
}

vec3 SolveSkyScattering(float phi, float theta){
    float sin_theta = sin(theta);
    float cos_theta = cos(theta);

    vec3 view_dir = vec3(cos(phi) * cos_theta, sin_theta, sin(phi) * cos_theta);

    vec2 planet_pos = vec2(0, ViewPos.y + GroundRadius);
    vec2 planet_dir = vec2(cos_theta, sin_theta);

    float end_t = 0;
    if (!FindClosestIntersectionWithCircle(planet_pos, planet_dir, GroundRadius, end_t)){
        FindClosestIntersectionWithCircle(planet_pos, planet_dir, TopAtmosphereRadius, end_t);
    }

    float phase_u = dot(-SunDir, view_dir);

    vec3 in_scattering_sum = vec3(0);
    vec3 sigam_t_sum = vec3(0);
    float t = 0;
    float dt = end_t / RayMarchingSteps;
    float half_dt = 0.5 * dt;
    for (int i = 0; i < RayMarchingSteps; ++i){
        float mid_t = t + half_dt;
        t += dt;
        vec3 ith_pos = vec3(0, ViewPos.y + GroundRadius, 0) + view_dir * mid_t;
        float ith_h = length(ith_pos) - GroundRadius;

        vec3 ith_sigma_s, ith_sigma_t;
        GetSigmaST(ith_h, ith_sigma_s, ith_sigma_t);

        vec3 ith_transmittance = exp(-(sigam_t_sum + ith_sigma_t * half_dt));

        float sun_theta = PI / 2 - acos(dot(-SunDir, normalize(ith_pos)));
        if (!HasIntersectionWithSphere(ith_pos, -SunDir, GroundRadius)){
            vec3 rho = EvalPhaseFunction(ith_h, phase_u);
            vec3 ith_sun_transmittance = GetTransmittance(ith_h, sun_theta);
            in_scattering_sum += ith_sun_transmittance * rho * ith_sigma_s * ith_transmittance * dt;
        }

        if (bool(EnableMultiScattering)){
            in_scattering_sum += GetMultiScattering(ith_h, sun_theta) * ith_sigma_s * ith_transmittance * dt;
        }
        sigam_t_sum += ith_sigma_t * dt;
    }
    return in_scattering_sum;
}

void main() {
    ivec2 res = imageSize(SkyLUT);
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    if (g_index.x >= res.x || g_index.y >= res.y){
        return;
    }

    float phi = (g_index.x + 0.5) / float(res.x) * 2 * PI;
    //non-linear mapping
    float vm = 2.0 * (g_index.y + 0.5) / float(res.y) - 1.0;
    float theta = sign(vm) * (PI / 2.0) * vm * vm;

    vec3 in_scattering = SolveSkyScattering(phi, theta);
    in_scattering *= SunRadiance;

    imageStore(SkyLUT, g_index, vec4(in_scattering, 1.0));
}
