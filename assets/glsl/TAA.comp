#version 460 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;


layout(binding = 0, rgba32f) uniform writeonly image2D CurAccColor;
layout(binding = 1, rgba32f) uniform readonly image2D CurColor;
layout(binding = 2, rgba32f) uniform readonly image2D CurGBuffer;
layout(binding = 3, rgba32f) uniform readonly image2D PreGBuffer;
layout(binding = 0) uniform sampler2D PreAccColor;


layout(std140, binding = 0) uniform Params{
    mat4 PreProjView;
    float BlendRatio;
    float DistRatio;
};

const ivec2 offset[9] = {
{-1, -1}, {-1, 0}, {-1, 1},
{0, -1}, {0, 0}, {0, 1},
{1, -1}, {1, 0}, {1, 1}
};
vec3 RGBToYCoCg(vec3 rgb){
    float co = rgb.r - rgb.b;
    float tmp = rgb.b + co * 0.5;
    float cg = rgb.g - tmp;
    float y = tmp + cg * 0.5;
    return vec3(y, co, cg);
}
vec3 YCoCgToRGB(vec3 ycocg){
    float tmp = ycocg.x - ycocg.z * 0.5;
    float g = ycocg.z + tmp;
    float b = tmp - ycocg.y * 0.5;
    float r = b + ycocg.y;
    return vec3(r, g, b);
}
void main(){
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    ivec2 res = imageSize(CurAccColor);
    if (g_index.x >= res.x || g_index.y >= res.y){
        return;
    }

    vec4 cur_color = imageLoad(CurColor, g_index);
    if(cur_color.w == 0){
        imageStore(CurAccColor, g_index, vec4(0));
        return;
    }

    vec3 pos = imageLoad(CurGBuffer, g_index).xyz;
    vec4 pre_pos_clip = PreProjView * vec4(pos, 1.f);
    vec2 pre_uv = pre_pos_clip.xy/ pre_pos_clip.w * 0.5 + 0.5;
    if (any(notEqual(clamp(pre_uv, vec2(0), vec2(1)), pre_uv))){
        imageStore(CurAccColor, g_index, cur_color);
        return;
    }
//    vec3 pre_pos = texture(PreGBuffer, pre_uv).xyz;
    vec3 pre_pos = imageLoad(PreGBuffer, g_index).xyz;
    vec3 pre_acc = RGBToYCoCg(texture(PreAccColor, pre_uv).rgb);
    vec3 aabb_min, aabb_max;
    aabb_min = aabb_max = pre_acc;
    for(int k = 0; k < 9; k++){
        vec3 C = RGBToYCoCg(imageLoad(CurColor, g_index + offset[k]).rgb);
        aabb_min = min(aabb_min, C);
        aabb_max = max(aabb_max, C);
    }
    vec3 filtered = (aabb_min + aabb_max) * 0.5;
    vec3 ray_origin = pre_acc;
    vec3 ray_dir = filtered - ray_origin;
    ray_dir.x = abs(ray_dir.x) < 1.0 / 65536.0 ? 1.0 / 65536.f : ray_dir.x;
    ray_dir.y = abs(ray_dir.y) < 1.0 / 65536.0 ? 1.0 / 65536.f : ray_dir.y;
    ray_dir.z = abs(ray_dir.z) < 1.0 / 65536.0 ? 1.0 / 65536.f : ray_dir.z;
    vec3 inv_dir = vec3(1.0 / ray_dir.x ,1.0 / ray_dir.y, 1.0 / ray_origin.z);
    vec3 min_intersect = (aabb_min - ray_origin) * inv_dir;
    vec3 max_intersect = (aabb_max - ray_origin) * inv_dir;
    vec3 enter = min(min_intersect, max_intersect);
    float blend = max(enter.x, max(enter.y, enter.z));
    blend = clamp(blend, 0.0, 1.0);

    pre_acc = mix(pre_acc, filtered, blend);
//    pre_acc = clamp(pre_acc, aabb_min, aabb_max);
    pre_acc = YCoCgToRGB(pre_acc);
    float alpha = BlendRatio;
    alpha *= exp(min(distance(pre_pos, pos) * DistRatio, 1.f));
    alpha = clamp(alpha, 0.0, 1.0);
    vec3 cur_acc = mix(pre_acc, cur_color.rgb, BlendRatio);
    imageStore(CurAccColor, g_index, vec4(cur_acc, cur_color.w));
}