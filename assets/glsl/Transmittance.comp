#version 460 core

#define RAY_MARCHING_STEPS 1024

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D TransmittanceLUT;

layout(std140, binding = 0) uniform AtmosphereProperties{
    vec3 RayleighScattering;
    float RayleighDensityH;

    float MieScattering;
    float MieAsymmetryG;
    float MieAbsorption;
    float MieDensityH;

    vec3 OzoneAbsorption;
    float OzoneCenterH;
    float OzoneWidth;

    float GroundRadius;
    float TopAtmosphereRadius;
    float pad;
};

float ClampCosine(float mu){
    return clamp(mu, -1.0, 1.0);
}

float SafeSqrt(float x){
    return sqrt(max(x, 0.0));
}

vec3 GetSigmaT(float h){
    vec3 rayleigh = RayleighScattering * exp(-h / rayleighDensityH);
    vec3 mie = vec3(MieScattering + MieAbsorption) * exp(-h / MieDensityH);
    vec3 ozone = OzoneAbsorption * max(0.0, 1 - abs(h - OzoneCenterH) / (OzoneWidth * 0.5));
    return rayleigh + mie + ozone;
}

bool FindClosestIntersectionWithCircle(vec2 o, vec2 d, float R, out float t){
    float A = dot(d, d);
    float B = 2 * dot(o, d);
    float C = dot(o, o) - R * R;
    float delta = B * B - 4 * A * C;
    if (delta < 0)
    return false;
    t = (-B + (C <= 0 ? sqrt(delta) : -sqrt(delta))) / (2 * A);
    return (C <= 0) || (B <= 0);
}

// mapping form [0, 1] to [0.5 / n, 1 - 0.5 / n]
float GetUnitRangeFromTextureCoord(float u, int texture_size){
    return 0.5 / float(texture_size) + x * (1.0 - 1.0 / float(texture_size));
}

vec2 GetRMu(float x_mu, float x_r){
    float H = sqrt(TopAtmosphereRadius * TopAtmosphereRadius - GroundRadius * GroundRadius);
    float rho = H * x_r;
    float r = sqrt(rho * rho + GroundRadius * GroundRadius);
    float d_min = TopAtmosphereRadius - r;
    float d_max = rho + H;
    float d = d_min + x_mu * (d_max - d_min);
    float mu = d == 0.0 ? 1.0 : (H * H - rho * rho - d * d) / (2.0 * r * d);
    mu = ClampCosine(mu);
    return vec2(mu, r);
}

void main(){
    ivec2 res = imageSize(TransmittanceLUT);
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    if (g_index.x >= res.x || g_index.y >= res.y){
        return;
    }

    vec2 ret = GetRMu((g_index.x + 0.5) / float(res.x), (g_index.y + 0.5) / float(res.y));
    float r = ret.y;
    float cos_theta = ret.x;
    float sin_theta = SafeSqrt(1.0 - cos_theta * cos_theta);

    //isotropic for phi so just use 2d-coord instead of 3d-coord and use circle instead of sphere
    vec2 c = vec2(0.0, r);
    vec2 v = vec2(sin_theta, cos_theta);

    float t = 0;

    // will not intersect with ground, ok.
    FindClosestIntersectionWithCircle(c, v, TopAtmosphereRadius, t);

    vec2 p = c + v * t;

    vec3 sum = vec3(0);
    float dt = t / RAY_MARCHING_STEPS;
    for (int i = 0; i < RAY_MARCHING_STEPS; i++){
        vec2 pi = mix(c, p, (i + 0.5) / RAY_MARCHING_STEPS);
        float hi = length(pi) - GroundRadius;
        vec3 sigma_t = GetSigmaT(hi);
        sum += sigma_t * dt;
    }

    vec4 tranimittance = vec4(exp(-sum), 1.f);
    imageStore(TransmittanceLUT, g_index, tranimittance);
}